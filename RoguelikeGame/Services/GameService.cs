using RoguelikeGame.Models;

namespace RoguelikeGame.Services;

public class GameService
{
    private readonly Random _random;
    private readonly Player _player;
    private int _turnCount;

    public GameService()
    {
        _random = new Random();
        _player = new Player();
        _turnCount = 0;
    }

    public void StartGame()
    {
        Console.WriteLine("=== –¢–ï–ö–°–¢–û–í–ê–Ø –ò–ì–†–ê-–†–û–ì–ê–õ–ò–ö ===");
        Console.WriteLine("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!");
        Console.WriteLine("–ù–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥—É –≤–∞—Å –∂–¥–µ—Ç –ª–∏–±–æ —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏, –ª–∏–±–æ –æ–ø–∞—Å–Ω—ã–π –≤—Ä–∞–≥.");
        Console.WriteLine("–ö–∞–∂–¥—ã–µ 10 —Ö–æ–¥–æ–≤ –≤–∞—Å –∂–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞ —Å –±–æ—Å—Å–æ–º!");
        Console.WriteLine();

        while (_player.IsAlive())
        {
            _turnCount++;
            Console.WriteLine($"=== –•–û–î {_turnCount} ===");
            DisplayPlayerStatus();
            Console.WriteLine();

            if (_turnCount % 10 == 0)
            {
                Console.WriteLine("üî• –í–°–¢–†–ï–ß–ê –° –ë–û–°–°–û–ú! üî•");
                var boss = GetRandomBoss();
                if (!FightBoss(boss))
                {
                    GameOver();
                    return;
                }
            }
            else
            {
                if (_random.Next(1, 3) == 1)
                {
                    Console.WriteLine("üì¶ –í—ã –Ω–∞—à–ª–∏ —Å—É–Ω–¥—É–∫!");
                    OpenChest();
                }
                else
                {
                    Console.WriteLine("‚öîÔ∏è –í—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞–≥–æ–º!");
                    var enemy = GetRandomEnemy();
                    if (!FightEnemy(enemy))
                    {
                        GameOver();
                        return;
                    }
                }
            }

            if (_player.IsFrozen)
            {
                Console.WriteLine("‚ùÑÔ∏è –í—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —Ö–æ–¥!");
                _player.IsFrozen = false;
            }

            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadLine();
            Console.Clear();
        }
    }

    private void DisplayPlayerStatus()
    {
        Console.WriteLine($"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {_player.CurrentHp}/{_player.MaxHp}");
        Console.WriteLine($"‚öîÔ∏è –ê—Ç–∞–∫–∞: {_player.GetAttack()}");
        Console.WriteLine($"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {_player.GetDefense()}");
        Console.WriteLine($"üó°Ô∏è –û—Ä—É–∂–∏–µ: {(_player.Weapon?.Name ?? "–ù–µ—Ç")}");
        Console.WriteLine($"üõ°Ô∏è –î–æ—Å–ø–µ—Ö–∏: {(_player.Armor?.Name ?? "–ù–µ—Ç")}");
    }

    private Enemy GetRandomEnemy()
    {
        var enemies = new List<Enemy> { new Goblin(), new Skeleton(), new Mage() };
        return enemies[_random.Next(enemies.Count)];
    }

    private Enemy GetRandomBoss()
    {
        var bosses = new List<Enemy> { new VVG(), new Kovalsky(), new ArchmageCpp(), new PestovC() };
        return bosses[_random.Next(bosses.Count)];
    }

    private bool FightEnemy(Enemy enemy)
    {
        Console.WriteLine($"–í—Å—Ç—Ä–µ—á–µ–Ω –≤—Ä–∞–≥: {enemy.Name}");
        Console.WriteLine($"–ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: {enemy.CurrentHp}");
        Console.WriteLine();

        while (_player.IsAlive() && enemy.IsAlive())
        {
            if (_player.IsFrozen)
            {
                Console.WriteLine("‚ùÑÔ∏è –í—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!");
                _player.IsFrozen = false;
            }
            else
            {
                PlayerTurn(enemy);
            }

            if (!enemy.IsAlive())
            {
                Console.WriteLine($"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {enemy.Name}!");
                return true;
            }

            EnemyTurn(enemy);
        }

        return _player.IsAlive();
    }

    private bool FightBoss(Enemy boss)
    {
        Console.WriteLine($"üî• –í–°–¢–†–ï–ß–ê –° –ë–û–°–°–û–ú: {boss.Name} üî•");
        Console.WriteLine($"–ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Å—Å–∞: {boss.CurrentHp}");
        Console.WriteLine();

        while (_player.IsAlive() && boss.IsAlive())
        {
            if (_player.IsFrozen)
            {
                Console.WriteLine("‚ùÑÔ∏è –í—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!");
                _player.IsFrozen = false;
            }
            else
            {
                PlayerTurn(boss);
            }

            if (!boss.IsAlive())
            {
                Console.WriteLine($"üèÜ –í–´ –ü–û–ë–ï–î–ò–õ–ò –ë–û–°–°–ê {boss.Name}! üèÜ");
                return true;
            }

            EnemyTurn(boss);
        }

        return _player.IsAlive();
    }

    private bool _isDefending = false;

    private void PlayerTurn(Enemy enemy)
    {
        Console.WriteLine("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        Console.WriteLine("1. –ê—Ç–∞–∫–æ–≤–∞—Ç—å");
        Console.WriteLine("2. –ó–∞—â–∏—â–∞—Ç—å—Å—è");

        while (true)
        {
            var choice = Console.ReadLine();
            if (choice == "1")
            {
                AttackEnemy(enemy);
                _isDefending = false;
                break;
            }
            else if (choice == "2")
            {
                Defend();
                break;
            }
            else
            {
                Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2");
            }
        }
    }

    private void AttackEnemy(Enemy enemy)
    {
        int damage = _player.GetAttack();
        Console.WriteLine($"–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –Ω–∞ {damage} —É—Ä–æ–Ω–∞!");
        enemy.TakeDamage(damage);
        Console.WriteLine($"–£ –≤—Ä–∞–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {enemy.CurrentHp} –∑–¥–æ—Ä–æ–≤—å—è");
    }

    private void Defend()
    {
        Console.WriteLine("–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∑–∞—â–∏—Ç–Ω—É—é —Å—Ç–æ–π–∫—É!");
        _isDefending = true;
    }

    private void EnemyTurn(Enemy enemy)
    {
        int damage = enemy.AttackPlayer(_player, _random);
        
        if (_player.IsFrozen)
        {
            return;
        }

        int finalDamage = CalculateDamage(damage, enemy);
        if (finalDamage > 0)
        {
            _player.TakeDamage(finalDamage);
            Console.WriteLine($"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {finalDamage} —É—Ä–æ–Ω–∞!");
            Console.WriteLine($"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {_player.CurrentHp} –∑–¥–æ—Ä–æ–≤—å—è");
        }
        else
        {
            Console.WriteLine("–í—ã —É–∫–ª–æ–Ω–∏–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏!");
        }
    }

    private int CalculateDamage(int baseDamage, Enemy enemy)
    {
        if (_isDefending)
        {
            if (_random.Next(1, 101) <= 40)
            {
                Console.WriteLine("–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–∫–ª–æ–Ω–∏–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏!");
                _isDefending = false;
                return 0;
            }
            else
            {
                Console.WriteLine("–£–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –∑–∞—â–∏—Ç–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!");
                if (enemy.IgnoresDefense)
                {
                    Console.WriteLine("–ù–æ –≤—Ä–∞–≥ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É!");
                    _isDefending = false;
                    return baseDamage;
                }
                int defense = _player.GetDefense();
                int blockChanceDefend = _random.Next(70, 101);
                int blockAmountDefend = (int)(defense * blockChanceDefend / 100.0);
                _isDefending = false;
                return Math.Max(0, baseDamage - blockAmountDefend);
            }
        }

        if (enemy.IgnoresDefense)
        {
            return baseDamage;
        }

        int playerDefense = _player.GetDefense();
        int blockChance = _random.Next(70, 101);
        int blockAmount = (int)(playerDefense * blockChance / 100.0);
        
        return Math.Max(0, baseDamage - blockAmount);
    }

    private void OpenChest()
    {
        var item = GetRandomItem();
        
        if (item is HealthPotion potion)
        {
            Console.WriteLine($"–í—ã –ø–æ–ª—É—á–∏–ª–∏: {potion.Name}");
            _player.FullHeal();
            Console.WriteLine("–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
        }
        else if (item is Weapon weapon)
        {
            Console.WriteLine($"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ä—É–∂–∏–µ: {weapon.Name}");
            Console.WriteLine($"–ê—Ç–∞–∫–∞: {weapon.Attack}, –ö—Ä–∏—Ç. —à–∞–Ω—Å: {weapon.CriticalChance}%");
            
            if (_player.Weapon != null)
            {
                Console.WriteLine($"–¢–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ: {_player.Weapon.Name} (–ê—Ç–∞–∫–∞: {_player.Weapon.Attack})");
                Console.WriteLine("–ó–∞–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ? (y/n)");
                
                if (Console.ReadLine()?.ToLower() == "y")
                {
                    _player.Weapon = weapon;
                    Console.WriteLine($"–û—Ä—É–∂–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ {weapon.Name}!");
                }
                else
                {
                    Console.WriteLine("–û—Ä—É–∂–∏–µ –≤—ã–±—Ä–æ—à–µ–Ω–æ.");
                }
            }
            else
            {
                _player.Weapon = weapon;
                Console.WriteLine($"–û—Ä—É–∂–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: {weapon.Name}!");
            }
        }
        else if (item is Armor armor)
        {
            Console.WriteLine($"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å–ø–µ—Ö–∏: {armor.Name}");
            Console.WriteLine($"–ó–∞—â–∏—Ç–∞: {armor.Defense}");
            
            if (_player.Armor != null)
            {
                Console.WriteLine($"–¢–µ–∫—É—â–∏–µ –¥–æ—Å–ø–µ—Ö–∏: {_player.Armor.Name} (–ó–∞—â–∏—Ç–∞: {_player.Armor.Defense})");
                Console.WriteLine("–ó–∞–º–µ–Ω–∏—Ç—å –¥–æ—Å–ø–µ—Ö–∏? (y/n)");
                
                if (Console.ReadLine()?.ToLower() == "y")
                {
                    _player.Armor = armor;
                    Console.WriteLine($"–î–æ—Å–ø–µ—Ö–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ {armor.Name}!");
                }
                else
                {
                    Console.WriteLine("–î–æ—Å–ø–µ—Ö–∏ –≤—ã–±—Ä–æ—à–µ–Ω—ã.");
                }
            }
            else
            {
                _player.Armor = armor;
                Console.WriteLine($"–î–æ—Å–ø–µ—Ö–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω—ã: {armor.Name}!");
            }
        }
    }

    private Item GetRandomItem()
    {
        int itemType = _random.Next(1, 4);
        
        return itemType switch
        {
            1 => new HealthPotion(),
            2 => GetRandomWeapon(),
            3 => GetRandomArmor(),
            _ => new HealthPotion()
        };
    }

    private Weapon GetRandomWeapon()
    {
        var weapons = new List<Weapon>
        {
            new("–†–∂–∞–≤—ã–π –º–µ—á", 12, 5),
            new("–ë–æ–µ–≤–æ–π —Ç–æ–ø–æ—Ä", 18, 15),
            new("–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö", 15, 25),
            new("–ö–∏–Ω–∂–∞–ª —É–±–∏–π—Ü—ã", 20, 30),
            new("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–ª–∏–Ω–æ–∫", 25, 40)
        };
        
        return weapons[_random.Next(weapons.Count)];
    }

    private Armor GetRandomArmor()
    {
        var armors = new List<Armor>
        {
            new("–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", 8),
            new("–ö–æ–ª—å—á—É–≥–∞", 12),
            new("–õ–∞—Ç–Ω–∞—è –±—Ä–æ–Ω—è", 18),
            new("–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–æ—Å–ø–µ—Ö–∏", 15),
            new("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –±—Ä–æ–Ω—è", 25)
        };
        
        return armors[_random.Next(armors.Count)];
    }

    private void GameOver()
    {
        Console.WriteLine();
        Console.WriteLine("üíÄ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê üíÄ");
        Console.WriteLine($"–í—ã –ø—Ä–æ–¥–µ—Ä–∂–∞–ª–∏—Å—å {_turnCount} —Ö–æ–¥–æ–≤");
        Console.WriteLine("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!");
    }
}
